/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.apache.spark.examples.ipg;

import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.imageio.stream.*;
import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.image.ColorConvertOp;
import java.awt.color.ColorSpace;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Arrays;


/**
 *
 * @author tatian
 */
public class MainFrame extends javax.swing.JFrame {

    public static String imagePath="";//图片的路径
    public static BufferedImage src;//原图像
    public static BufferedImage gray_src;//原图像的灰度图
    public static BufferedImage gray_des;//转换后图像的灰度图
    public static int Min,Max;//图像的灰度范围
    public static int[][] sdpi;//原图像的灰度矩阵
    public static int[][] ddpi;//转换后图像的灰度矩阵
    public static int[] sr;//转换后灰度图像中各个灰度值点的出现的数量
    public static int[] cast;//映射表
    public static int size;//矩阵大小
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        //初始化为默认的一张图片
        imagePath="C:\\Users\\tatian\\Desktop\\afia.bmp";       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    //移位倒转
    int Reverse(int n,int r){
        int tmp=0;
        for(int i=r-1;i>=0&&n!=0;i--){
            tmp+=(n%2)<<i;
            n/=2;
        }
        return tmp;
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SelectFile_Button = new javax.swing.JButton();
        FileName_TextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        hight = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        width = new javax.swing.JLabel();
        FFT_button = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        min = new javax.swing.JLabel();
        max = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DCT_Button = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        OK_Button = new javax.swing.JButton();
        s_canvas = new java.awt.Canvas(){
            public void paint(Graphics graphics) {
                Graphics g2d =(Graphics2D) graphics;
                g2d.drawImage(gray_src, 0, 0, this);
                this.setVisible(true);
            }
        };
        d_canvas = new java.awt.Canvas(){
            public void paint(Graphics graphics) {
                super.paint(graphics);
                Graphics g2d =(Graphics2D) graphics;
                g2d.drawImage(gray_des, 0, 0, this);
                this.setVisible(true);
            }
        };
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("图片直方处理及灰度变化");
        setPreferredSize(new java.awt.Dimension(900, 800));

        SelectFile_Button.setText("选择文件");
        SelectFile_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectFile_ButtonActionPerformed(evt);
            }
        });

        FileName_TextField.setText("C:\\Users\\tatian\\Desktop\\afia.bmp");
        FileName_TextField.setToolTipText("文件路径");

        jLabel1.setText("原图像");

        hight.setText("0");

        jLabel3.setText("*");

        width.setText("0");

        FFT_button.setText("傅立叶变换");
        FFT_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FFT_buttonActionPerformed(evt,true);
            }
        });

        jLabel2.setText("灰度范围：");

        min.setText("0");

        max.setText("0");

        jLabel6.setText("-");

        DCT_Button.setText("傅立叶逆变换");
        DCT_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FFT_buttonActionPerformed(evt,false);
            }
        });

        jLabel7.setText("图片分辨率：");

        jLabel8.setText("处理后图片");

        OK_Button.setText("确定");
        OK_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OK_ButtonActionPerformed(evt);
            }
        });

        s_canvas.setBackground(new java.awt.Color(204, 255, 51));

        d_canvas.setBackground(new java.awt.Color(0, 153, 204));

        jLabel9.setText("FFT和DCT后的图片位于D：/下");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(FileName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SelectFile_Button)
                        .addGap(18, 18, 18)
                        .addComponent(OK_Button))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(s_canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(d_canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hight, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addComponent(FFT_button))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(DCT_Button)
                                .addGap(73, 73, 73)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(width, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(46, 46, 46)
                                .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(max, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(181, 181, 181))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectFile_Button)
                    .addComponent(FileName_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OK_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hight)
                    .addComponent(jLabel3)
                    .addComponent(width)
                    .addComponent(jLabel2)
                    .addComponent(min)
                    .addComponent(max)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DCT_Button)
                    .addComponent(FFT_button)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(s_canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(d_canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //一维快速傅里叶变换,src为原数据，r为迭代阶数，N为扩充后总的节点数
    ComplexNumber[] FFT(ComplexNumber[] src,int N,int r,boolean isN)
    {
//        ComplexNumber[] des=new ComplexNumber[N];//最后结果
//        ComplexNumber[] tmp=new ComplexNumber[N];//中间暂存
//        int i,j,k;//循环变量
//        int step;//间隔
//        int wn;//用于计算W使用
//        double x;//用于计算W使用
//        ComplexNumber W=new ComplexNumber();
//        ComplexNumber Odd=new ComplexNumber();//第二部分
//        //调整顺序
//        for(i=0;i<N;i++){
//            j=Reverse(i,r);
//            des[j]=src[i];
//        }
//        //FFT
//        for(i=0;i<r;i++){//最外层嵌套，共r次迭代
//            step=1<<i;//间隔为1，2，4，……2^(r-1)
//            wn=step*2;
//            for(j=0;j<N/wn;j++)
//                for(k=0;k<step;k++){
//                    x=2*Math.PI*k/wn;
//                    W.real=Math.cos(x);W.img=-Math.sin(x);
//                    Odd=W.mul(des[j*wn+step+k]);
//                    tmp[j*wn+k]=des[j*wn+k].add(Odd);
//                    tmp[j*wn+step+k]=des[j*wn+k].sub(Odd);
//                }
//            //将tmp回填到des中，一遍继续循环使用
//            for(int cou=0;cou<N;cou++)
//            {
//                des[cou]=tmp[cou];
//            }
//        }
        return isN?FFT.fft(src):FFT.ifft(src);
    }
    
    private void FFT_buttonActionPerformed(java.awt.event.ActionEvent evt,boolean isN) {//GEN-FIRST:event_FFT_buttonActionPerformed
        // TODO add your handling code here:
      int m=gray_src.getHeight();
      int n=gray_src.getWidth();
      int Mr,Nr;//迭代次数
      for(Mr=1;!(Math.pow(2, Mr-1)<=m&&Math.pow(2, Mr)>m);Mr++);
      //扩展后行数
      int M=(int)Math.pow(2, Mr);
      for(Nr=1;!(Math.pow(2, Nr-1)<=n&&Math.pow(2, Nr)>n);Nr++);
      //扩展后列数
      int N=(int)Math.pow(2, Nr);
      
      //扩展后的单点傅立叶变换复数矩阵
      ComplexNumber [][] Ext=new ComplexNumber[M][N];

       //初始化矩阵
      for(int i=0;i<M;i++)
          for(int j=0;j<N;j++)
              Ext[i][j]=new ComplexNumber();
      //将原图片填入Ext矩阵
      for(int i=0;i<m;i++)
          for(int j=0;j<n;j++)
              Ext[i][j]=new ComplexNumber(sdpi[j][i],0);


        ComplexNumber [][]ExtXY=imgFFT(M,N,Ext,isN);
        int gray,rgb;
        ddpi=new int[M][N];
        gray_des=new BufferedImage(N,M,BufferedImage.TYPE_INT_RGB);
        //将傅立叶变换频谱填入平移后位置，使其在中心显示
        for(int i=0;i<M;i++){
            for(int j=0;j<N;j++){
                gray=(int)Math.sqrt(Math.pow(ExtXY[i][j].real, 2)
                        +Math.pow(ExtXY[i][j].img, 2))/100;
                if(gray>255) gray=255;
                ddpi[i<M/2?i+M/2:i-M/2][j<N/2?j+N/2:j-N/2]=gray;
            }
        }
        //将灰度填入处理后的图片
        for(int i=0;i<M;i++){
            for(int j=0;j<N;j++){
                gray=ddpi[i][j];
                rgb = (gray*256 + gray)*256+gray;
                if(rgb>8388608)  
                      rgb = rgb - 16777216;
                gray_des.setRGB(j, i, rgb);
            }
        }
         
         //绘制转换后图像区域
        d_canvas.repaint();
        
        //以流的方式保存文件
        try{
             FileOutputStream outfile = new FileOutputStream("D:/FFT频谱.bmp" );
            try{
                 ImageOutputStream i=ImageIO.createImageOutputStream(outfile);
                ImageIO.write(gray_des, "bmp", i);
            } catch (Exception e) {
             // TODO Auto-generated catch block
             e.printStackTrace();
    }//GEN-LAST:event_FFT_buttonActionPerformed
           }catch(IOException e){
           }
    }

    public ComplexNumber[][] imgFFT(int M,int N,ComplexNumber [][] input,boolean isN){

        System.out.println("-------------------------");
        CalUtil.show(input);
        System.out.println("-------------------------");

        //二维傅里叶变换
        ComplexNumber [][] ExtXY=new ComplexNumber[M][N];
        //X行的一维傅立叶变换
        ComplexNumber [][] ExtX=new ComplexNumber[M][N];
        //每行的一维FFT
        ComplexNumber [] tmp=new ComplexNumber[N];//暂存每一行的值
        for(int i=0;i<M;i++){
            for(int j=0;j<N;j++)
                tmp[j]=new  ComplexNumber(input[i][j].real,input[i][j].img);
            tmp=FFT(tmp,0,0,isN);
            for(int j=0;j<N;j++)
            {
                ExtX[i][j]=new  ComplexNumber(tmp[j].real,tmp[j].img);
            }
        }
        System.out.println("-------------------------");
        CalUtil.show(ExtX);
        System.out.println("-------------------------");

        //二维FFT
        ComplexNumber [] tmp2=new ComplexNumber[M];//暂存每一列的值
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++)
                tmp2[j]=new  ComplexNumber(ExtX[j][i].real,ExtX[j][i].img);
            tmp2=FFT(tmp2,0,0,isN);
            for(int j=0;j<M;j++)
            {
                ExtXY[j][i]=new  ComplexNumber(tmp2[j].real,tmp2[j].img);
            }
        }
        System.out.println("-------------------------");
        CalUtil.show(ExtXY);
        System.out.println("-------------------------");

        return ExtXY;
    }

    public void fileChooser() {
        JFileChooser chooser = new JFileChooser();
        //设置文件类型
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "图片(bmp,jpg,png,jpeg)", "bmp","jpg","png","jpeg");
        //打开选择器面板
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(new JPanel());  
        //输出的是文件名
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            imagePath=chooser.getSelectedFile().getAbsolutePath();
            this.FileName_TextField.setText(imagePath);
        }
    }

    
    private void SelectFile_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectFile_ButtonActionPerformed
        // TODO add your handling code here:
        fileChooser();
    }//GEN-LAST:event_SelectFile_ButtonActionPerformed

    private void OK_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK_ButtonActionPerformed
        // TODO add your handling code here:
        try{
        src = ImageIO.read(new File(imagePath)); // 读入文件
        }catch(Exception e){
            //异常
            JOptionPane.showMessageDialog(null, "文件无法打开！请检查配置。","警告！",  JOptionPane.ERROR_MESSAGE); 
        }   
        
        this.width.setText(String.valueOf(src.getWidth())); // 得到源图宽
        this.hight.setText(String.valueOf(src.getHeight())); // 得到源图长
        //获得原图像的灰度图象
        gray_src=new BufferedImage(src.getWidth(),src.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
        ColorConvertOp cco=new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY),null);
        cco.filter(src,gray_src);
        //BufferedImage图象处理颜色需要RGB三色，需要转换灰度值
        int green,red,blue,gray;
        //图像上的像素单元，用Object类表示
        Object data=gray_src.getRaster().getDataElements(gray_src.getMinX(), gray_src.getMinY(), null);
        red=gray_src.getColorModel().getRed(data);
        blue = gray_src.getColorModel().getBlue(data);
        green = gray_src.getColorModel().getGreen(data);
        //初始值
        Min=Max=(int)(red*0.3+green*0.59+blue*0.11);
        //确定灰度矩阵的大小
        sdpi=new int[gray_src.getWidth()][gray_src.getHeight()];
        //确定灰度范围,填充原图像灰度矩阵
        for(int i=gray_src.getMinX();i<gray_src.getWidth();i++){
            for(int j=gray_src.getMinY();j<gray_src.getHeight();j++){
                data=gray_src.getRaster().getDataElements(i,j, null);
                red=gray_src.getColorModel().getRed(data);
                blue = gray_src.getColorModel().getBlue(data);
                green = gray_src.getColorModel().getGreen(data);
                gray=(int)(red*0.3+green*0.59+blue*0.11);
                sdpi[i][j]=gray;
                if(gray<Min) Min=gray;
                if(gray>Max) Max=gray;  
            }
        }
        //获得图像的灰度范围
        this.min.setText(Min+"");
        this.max.setText(Max+"");
        
        //绘制原图像区域
        s_canvas.repaint();
    }//GEN-LAST:event_OK_ButtonActionPerformed
    
    //一维快速余弦傅立叶变换，调用FFT
    double[] DCT(double[] src,int N,int r){
        double [] des=new double[N];
        ComplexNumber [] X=new ComplexNumber[N*2];//X用于调用FFT
        //填充X
        int i;
        for(i=0;i<N;i++)
            X[i]=new ComplexNumber(src[i],0);
        while(i<N*2)
            X[i++]=new ComplexNumber();

        X=FFT(X,N*2,r+1,true);
        double dtmp=1/Math.sqrt(N);//系数
        des[0]=X[0].real*dtmp;
        dtmp*=Math.sqrt(2);
        for(i=1;i<N;i++)
            des[i]=(X[i].real*Math.cos(i*Math.PI /(N*2))+X[i].img*Math.sin(i*Math.PI /(N*2)))*dtmp;
        
        return des;
     }
    
    private void DCT_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DCT_ButtonActionPerformed
        // TODO add your handling code here:
      int m=gray_src.getHeight();
      int n=gray_src.getWidth();
      int Mr,Nr;//迭代次数
      for(Mr=1;!(Math.pow(2, Mr-1)<=m&&Math.pow(2, Mr)>m);Mr++) 
          ;
      //扩展后行数
      int M=(int)Math.pow(2, Mr);
      for(Nr=1;!(Math.pow(2, Nr-1)<=n&&Math.pow(2, Nr)>n);Nr++) 
          ;
      //扩展后列数
      int N=(int)Math.pow(2, Nr);
      
      //扩展后的单点傅立叶变换复数矩阵
      double [][] Ext=new double[M][N];
      //X行的一维傅立叶变换
      double [][] ExtX=new double[M][N];
      //二维傅里叶变换
      double [][] ExtXY=new double[M][N];
       //初始化矩阵
      for(int i=0;i<M;i++)
          for(int j=0;j<N;j++)
              Ext[i][j]=0;
      //将原图片填入Ext矩阵
      for(int i=0;i<m;i++)
          for(int j=0;j<n;j++)
              Ext[i][j]=sdpi[j][i];
      
      //每行的一维DCT
      double [] tmp=new double[N];//暂存每一行的值
      for(int i=0;i<M;i++){
         for(int j=0;j<N;j++)
              tmp[j]=Ext[i][j];
          tmp=DCT(tmp,N,Nr);
          for(int j=0;j<N;j++)
          {
              ExtX[i][j]=tmp[j];
          }
      }
    
      //二维DCT
      double [] tmp2=new double[M];//暂存每一列的值
      for(int i=0;i<N;i++){
          for(int j=0;j<M;j++)
              tmp2[j]=ExtX[j][i];
          tmp2=DCT(tmp2,M,Mr);
          for(int j=0;j<M;j++)
          {
              ExtXY[j][i]=tmp2[j];
          }   
      }
      
        int gray,rgb;
        ddpi=new int[M][N];
        gray_des=new BufferedImage(N,M,BufferedImage.TYPE_INT_RGB);
   
        //将灰度填入处理后的图片
        for(int i=0;i<M;i++){
            for(int j=0;j<N;j++){
                gray=Math.abs((int)ExtXY[i][j]);
                if(gray>255) gray=255;
                ddpi[i][j]=gray;
                rgb = (gray*256 + gray)*256+gray;
                if(rgb>8388608)  
                      rgb = rgb - 16777216;
                gray_des.setRGB(j, i, rgb);
            }
        }
         
         //绘制转换后图像区域
        d_canvas.repaint();
        
        //以流的方式保存文件
        try{
             FileOutputStream outfile = new FileOutputStream("D:/DCT频谱.bmp" );
            try{
                 ImageOutputStream i=ImageIO.createImageOutputStream(outfile);
                ImageIO.write(gray_des, "bmp", i);
            } catch (Exception e) {
             // TODO Auto-generated catch block
             e.printStackTrace();
    }                                              
           }catch(IOException e){
           }
    }//GEN-LAST:event_DCT_ButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DCT_Button;
    private javax.swing.JButton FFT_button;
    private javax.swing.JTextField FileName_TextField;
    private javax.swing.JButton OK_Button;
    private javax.swing.JButton SelectFile_Button;
    private java.awt.Canvas d_canvas;
    private javax.swing.JLabel hight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel max;
    private javax.swing.JLabel min;
    private java.awt.Canvas s_canvas;
    private javax.swing.JLabel width;
    // End of variables declaration//GEN-END:variables
}
